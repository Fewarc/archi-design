generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
    id      String    @id @default(cuid()) @map("_id")
    name    String
    members User[]
    Project Project[]
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    image         String?
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    Team          Team?     @relation(fields: [teamId], references: [id])
    teamId        String?
}

enum ProjectStatus {
    ACTIVE
    PAUSED
    FINISHED
}

model Project {
    id              String              @id @default(cuid()) @map("_id")
    startDate       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt
    plannedDeadline DateTime?
    name            String
    clientName      String
    address         String
    city            String
    phoneNumber     String
    email           String
    status          ProjectStatus       @default(ACTIVE)
    contacts        AdditionalContact[]
    notes           ProjectNote[]
    stages          ProjectStage[]
    Team            Team?               @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId          String
    scopes          ProjectScope[]
}

model AdditionalContact {
    id          String  @id @default(cuid()) @map("_id")
    project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String
    name        String
    occupation  String
    phoneNumber String
    email       String
    note        String
}

model ProjectNote {
    id        String  @id @default(cuid()) @map("_id")
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    category  String
    content   String
}

model ProjectStage {
    id        String  @id @default(cuid()) @map("_id")
    name      String
    project   Project @relation(fields: [projectId], references: [id])
    projectId String
    folderId  String
}

enum ProjectScopeCategory {
    CONCEPTUAL
    COMPREHENSIVE
}

model ProjectScope {
    id        String               @id @default(cuid()) @map("_id")
    name      String
    category  ProjectScopeCategory @default(CONCEPTUAL)
    surface   Float
    price     Float
    Project   Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    Product   Product[]
}

enum Shop {
    castorama
    leroymerlin
    ikea
}

enum ProductType {
    PIECE
    METERS
}

model Product {
    id             String       @id @default(cuid()) @map("_id")
    scope          ProjectScope @relation(fields: [projectScopeId], references: [id], onDelete: Cascade)
    name           String
    link           String
    price          String?
    imageUrl       String?
    producer       String?
    color          String?
    shop           Shop
    projectScopeId String
    type           ProductType  @default(PIECE)
    metersOrPieces Int?
}
