// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite"
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    image         String?
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
}

enum ProjectStatus {
    ACTIVE
    PAUSED
    FINISHED
}

model Project {
    id              String              @id @default(cuid()) @map("_id")
    startDate       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt
    plannedDeadline DateTime?
    name            String
    clientName      String
    address         String
    city            String
    phoneNumber     String
    email           String
    status          ProjectStatus       @default(ACTIVE)
    contacts        AdditionalContact[]
    ProjectNote     ProjectNote[]
}

model AdditionalContact {
    id          String  @id @default(cuid()) @map("_id")
    project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String
    name        String
    occupation  String
    phoneNumber String
    email       String
    note        String
}

model ProjectNote {
    id        String  @id @default(cuid()) @map("_id")
    project   Project @relation(fields: [projectId], references: [id])
    projectId String
    category  String
    content   String
}
